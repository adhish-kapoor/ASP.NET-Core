# Understanding the Run, Use and Map Method
============================================

=> app.Run()
This middleware component may expose Run[Middleware] methods that are executed at the end of the pipeline. 
Generally, this acts as a terminal middleware and is added at the end of the request pipeline, as it cannot call the next middleware.

=> app.Use()
This is used to configure multiple middleware. 
Unlike app.Run(), We can include the next parameter into it, which calls the next request delegate in the pipeline. 
We can also short-circuit (terminate) the pipeline by not calling the next parameter.

            	 //Middlewares added to request pipeline
           	 //async used because ASP.NET CORE works on asynchronous pattern
           	 //next() is used to call next middleware in the pipeline
            			app.Use(async (context, next) =>
           			{
                			await context.Response.WriteAsync("Hello from first middleware");

                			await next();

               	 			await context.Response.WriteAsync("Hello from first middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from second middleware");

                			await next();

                			await context.Response.WriteAsync("Hello from second middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from third middleware");
            			});


=> app.Map()
These extensions are used as a convention for branching the pipeline. 
The map branches the request pipeline based on matches of the given request path. If the request path starts with the given path, the branch is executed.

			public void Configure(IApplicationBuilder app, IWebHostEnvironment env)  
			{  
    				app.Map("/m1", HandleMapOne);  
    				app.Map("/m2", appMap => {  
        					appMap.Run(async context =>  
       			 		{  
           				 		await context.Response.WriteAsync("Hello from 2nd app.Map()");  
        					});  
    			       	});  
    				app.Run(async (context) =>  
    				{  
        					await context.Response.WriteAsync("Hello from app.Run()");  
    				});  
			}  
			private static void HandleMapOne(IApplicationBuilder app)  
			{  
    				app.Run(async context =>  
    				{  
        					await context.Response.WriteAsync("Hello from 1st app.Map()");  
    				});   
			}  

The following table shows the requests and responses from localhost using the above code.
Request					Response
https://localhost:44362/		Hello from app.Run()
https://localhost:44362/m1		Hello from 1st app.Map()
https://localhost:44362/m1/xyz		Hello from 1st app.Map()
https://localhost:44362/m2		Hello from 2nd app.Map()
https://localhost:44362/m500		Hello from app.Run()


In summary, every middleware component in ASP.NET Core:
		1. Has access to both the incoming requests and the outgoing response.
		2. May simply pass the request to the next piece of middleware in the pipeline.
		3. May perform some processing logic and then pass that request to the next middleware for further processing.
		4. May terminate(short-circuit) the request pipeline whenever required.
		5. Is executed in the order they are added to the pipeline.


# launchSettings.json
===========================

=>launchSettings.json is not required on production server, only required on development machine.
- A .NET Core application can have a file called launchSettings.json, which describes how a project can be launched. 
It describes the command to run, whether the browser should be opened, which environment variables should be set, and so on.

	// profiles section has 2 servers : IIS express and Kestrel
	                // HTTP access logs aren’t collected in Kestrel. For some, this doesn’t matter. But for others that use these logs as a debugging tool (Or pump them to something like Azure Diagnostics etc), this could be an issue.
		// Multiple apps on the same port is not supported in Kestrel simply by design. So when hosting on IIS, IIS itself listens on port 80 and “binds” websites to specific URLs. 
		// Kestrel on the other hand binds to an IP (Still with a website URL if you like), but you can’t then start another .NET Core Kestrel instance on the same port.  It’s a one to one mapping.
		// Windows Authentication does not exist on Kestrel as it’s cross platform (more on that later).
		// IIS has a direct FTP integration setup if you deploy via this method (Kestrel does not)
		// Request Filtering (e.g. Blocking access to certain file extensions, folders, verbs etc) is much more fully featured in IIS (Although some of this can be “coded” in Kestrel in some cases).
		// Mime Type Mapping (e.g. A particular file extension being mapped to a particular mime type on response) is much better in IIS.
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:51062",
      "sslPort": 0
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "BookStore": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


# Environment variables
========================

=> Used in launchSettings.json file under the "profiles" section.

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
            if (env.IsDevelopment())					// if the environment is Development; IsStaging(), IsProduction() and IsEnvironment()		
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
   }


# Setup MVC in .Net Core application using AddControllersWithViews method
===============================================================

=>    // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

=> 	app.UseEndpoints(endpoints =>
               {
                endpoints.MapDefaultControllerRoute();			// will map to Home/Index
                });


# AddMVC() vs AddControllersWithViews() vs AddControllers() vs AddRazorPages()
================================================================

=> 	Web API - AddControllers()
	Model View Controller - AddControllersWithViews()
	Razor pages - AddRazorPages()
	Else - AddMVC()

AddMVC()				AddControllersWithViews()			AddControllers()				AddRazorPages()
======================================================================================================================================================================
Controllers				Controllers					Controllers					Controllers

Model Binding				Model Binding					Model Binding					Model Binding

API Explorer				API Explorer					API Explorer					------------------

Authorization				Authorization					Authorization					Authorization

CORS					CORS						CORS						-------------------

Validations				Validations					Validations					Validations

FormatterMapping			FormatterMapping				FormatterMapping				-------------------

Antiforgery				Antiforgery					-----------------------				Antiforgery

Temp Data				Temp Data					-----------------------				Temp Data

Views					Views						-----------------------				Views

Pages					-----------------				----------------------				Pages

Tag Helpers				Tag Helpers					----------------------				Tag Helpers

Memory Cache				Memory Cache					---------------------				Memory Cache


# Controllers
===============

=>	public class BookController : Controller
    	{
        		public string GetAllBooks()
        		{
            			return "All books";				// http://localhost:51062/book/getallbooks
        		}

        		public string GetBook(int id)
        		{
            			return $"book with id = {id}";			// http://localhost:51062/book/getbook/4
        		}						// book with id = 4
  
	
		public string SearchBooks(string bookName, string authorName)
        		{
            			return $"Book with name = {bookName} and author = {authorName}";		// http://localhost:51062/book/Searchbooks?bookName=MVC&authorName=Adhish
        		}									// Book with name = MVC and author = Adhish
	}	


# View Discovery
=================

=> 	When we return view from action method then View Discovery takes place.
	View Discovery determines which view file will be used for this action method.


	0. An unhandled exception occurred while processing the request.              					// http://localhost:51062/home/contactus
		InvalidOperationException: The view 'ContactUs' was not found. The following locations were searched:
		/Views/Home/ContactUs.cshtml
		/Views/Shared/ContactUs.cshtml

	0. Common views must be placed in Shared folder.

	0. return View();					// name of view is equal to name of action method
	0. return View("viewName"); 				// name of view is not equal to name of action method

	==> Return View from other location
	 	0. Full path of view (extension of view file is required)			// return View("TempView/AdhishTemp.cshtml");
		0. Relative path (extension of view file is not required)			// return View("../../TempView/AdhishTemp");

	0. Razor ViewEngine is responsible for view discovery.


# Razor ViewEngine
==================

=> 	0. View Engine converts all C# code to HTML from a .cshtml file.
	0. View Engine is used to get/set the default path location for view, shared folder etc.

	0. Razor ViewEngine is used to write C# logic on view page
	0. Razor syntax is a standard for Razor ViewEngine (@ symbol is used).

	0. @DateTime.Now.ToString("yyyy-MM-dd")					// will output current date
	0.Escape Sequence is used to print @ on our view 				// @twitterAccount (<h1>Twitter Account - @@Adhish_Kapoor</h1>)


# Conditional statements in Razor ViewEngine
====================================

=> 	0. Ternary operator
		@{
			int a=10;
			int b=0;
		}

	<h1>Ternary - @(a==10 ? b=10 : b=5)</h1>					// Ternary - 10
	<h2>Value of b = @b</h2>							// Value of b = 10

# for and forEach loop
=========================

=> 		@for(int i=0;i<10;i++)
		{
			<h1>Hello @i</h1>
		}
	--------------------------------------------------------------------------------
		@{
			var list = new List<int>() {1, 2, 3, 4, 5};
		}
		@foreach(var i in list)
		{
			<h1>@i</h1>	
		}


# Static files
=================

=> 		0. Images, CSS files, JS files etc.
		0. All static files are placed inside wwwroot folder (also known as Content Root folder)
		0. app.UseStaticFiles(); is used for the static files in Startup.cs
		
		0. 	app.UseStaticFiles(new StaticFileOptions()								
			{
				FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), "MyStaticFiles")),		// to get Static files from custom folder other than wwwroot folder
				RequestPath = "/MyStaticFiles"
			});


# Install and use client side library(jQuery and Bootstrap)
===============================================

=> 		0. right click on project -> Add -> client side library
		0. defaultProvider : cdnjs in dropdown and added library jQuery
		0. library manager is used to change the version of client side libraries easily.


# Razor file compilation
======================

=> 		0. By default, Razor file is compiled at 2 times:
			1. Build
			2. Publish

		0. To resolve the problem of building solution again and again to see the changes in view file, we can Enable run time compilation of razor file.
		0. Steps to enable run time compilation of razor file:
			1. Install a new package : Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
			2. Make changes in Startup.cs (configureServices) : services.AddRazorPages().AddRazorRuntimeCompilation();
		0. Runtime Compilation Conditionally : Add preprocessor directive for run time compilation to happen in Debug mode.
			#if DEBUG
				services.AddRazorPages().AddRazorRuntimeCompilation();
			#endif			


# Layout in ASP.NET Core
=========================

=> 		0. Layout is a .cshtml file used to provide common structure to other views.
		0. @RenderBody() method is used to provide space for other view.
		0. Only one RenderBody() method inside one layout file.
		
		0. Benefits of Layout : 
			1. Less code
			2. Centralized code for static files
			3. No duplicate code
			4. Easy to update
			5. Good architecture


# Render and RenderSection 
=========================

=> 		0. RenderSection is a space with a specific name and it is used on _Layout file.
		0. RenderSection tells the application that some other code (coming from view) will be placed here.

		0. Section is used on views.
		0. @section directive is used to create a section.
		0. Each section has a unique name and whatever we will write in this section block that will replace the RenderSection (defined in _Layout file) with same name.
		
		0. @RenderSection("scripts",required:false)				// Used in _Layout.cshtml and to make @RenderSection optional required:false is used.

		0. @section scripts{							// Used in view file and this jQuery code will replace @RenderSection in _Layout.cshtml
				<script>
					$(document).ready(function() {
						alert("document is ready");
					})
				</script>

			}


# _ViewStart.cshtml 
====================

=> 		0. Common code to be executed for views is placed in _ViewStart file.
		0. @{
    			Layout = "_Layout";
		}


# _ViewImports.cshtml
====================

=> 		0. Common directives used in the application are placed in _ViewImports file like @using, @addTagHelper.
		0. The scope of _ViewImports applied to current folder(in which _ViewImports file is placed) and to all the subfolders.
		0. If we need to override any setting then we can create multiple _ViewImports file.


# ViewBag
=============

=>		0. ViewBag is used to pass data from action method to view and we can display this data on view.
		0. This type of data binding is known as loosely binding.
		0. We can pass any type of data in ViewBag.						// ViewBag.PropertyName = Data;
		0. ViewBag use dynamic property and works on dynamic type.
		0. ViewBag is a server side code and used with @ in a view.				// @ViewBag.Property
		0. ViewBag doesn't have typecasting and null checks
		
		0. Pass anonymous data to view using ViewBag
		===============================================
		In HomeController.cs :
		
		 public IActionResult Index()
        	{
            		dynamic data = new ExpandoObject();			// ExpandoObject comes under System.Dynamic namespace
            		data.Id = 1;
            		data.Name = "Adhish";

            		ViewBag.Data = data;
            		return View();
        	}

		In Index.cshtml :
		
		@{
    			dynamic data = ViewBag.Data;				
		}

			@data.Id						// 1
			@data.Name						// Adhish
		
		0. Pass object data to view using ViewBag
		============================================
		In HomeController.cs :
		
		public IActionResult Index()
        	{
			ViewBag.Type = new BookModel { Id = 2, Author = "This is Author" };
			return View();
		}
		
		In Index.cshtml :
		
		Id = @ViewBag.Type.Id						// Id = 2
		Name = @ViewBag.Type.Author					// Name = This is Author
		
		
# ViewData
=============

=> 		0. ViewData is used to pass data from action method to view and we can display this data on view.
		0. This type of data binding is known as loosely binding.
		0. We can pass any type of data in ViewData.
		0. Create a new key in ViewData and then assign some data to it.			// ViewData["PropertyName"] = Data;
		0. ViewData works on ViewDataDictionaryType.
		0. ViewData is a server side code and used with @ in a view.				// @ViewData["Property"]
		0. While sending object in ViewData then before using this data on view we need to 
		   cast it to its data type.
		0. ViewData can also be used to pass data from view to its layout view.
		
		0. Pass object data to view using ViewBag
		============================================
		In HomeController.cs :
		
		public IActionResult Index()
        	{
			ViewData["book"] = new BookModel { Id = 2, Author = "This is Author" };
			return View();
		}
		
		In Index.cshtml :
		
		@{
   	 		var bookInfo = ViewData["Book"] as BookStore.Models.BookModel;			// Casting to BookModel data type to make bookInfo of this type 
		}											// instead of type TModel (Generic type)

			@ViewData["Book"]					// BookStore.Models.BookModel
			@bookInfo.Id						// 2
			@bookInfo.Author					// This is Author

		0. Pass data from view to its layout view
		============================================
		In GetBook.cshtml :
		
		@using BookStore.Models
		@model BookModel
		@{
    			ViewData["Title"] = "Book details of " + Model.Title;
		}
		
		In _Layout.cshtml :
		
		<title>@ViewData["Title"] - Book Store</title>			// Book details of C# - Book Store
		
# TempData
=================
		0. TempData is also a dictionary object that stays for the time of an HTTP Request. 
		So, Tempdata can be used to maintain data between redirects, i.e., from one controller to the other controller
		
# Strongly typed views
========================
Razor views where we get Model intellisense.

# ViewModel
===============
ViewModel is a wrapper class which is wrapped around multiple models and this ViewModel represents the data 
what your view needs.

public class CustomerViewModel
{
public Customer customer {get; set;}
public List<Product> products {get; set;}
}

# Session management
========================
Maintaining states between HTTP requests.
3 ways to do Session management:
1. Session variable
2. ViewBag/ViewData
3. TempData

# Questions
=======================
1. [ASP.NET Core MVC] You have a CategoriesController and an Add action with the next signature looking like this:
[HttpPost]
public IActionResult Add(NewCategoryModel model)
You have to explicitly specify that the parameter model should be extracted from a request body. How would you achieve that?

A. Add [FromBody] like so:
[HttpPost]
public IActionResult Add([FromBody]NewCategoryModel model)

2. [ASP.NET MVC 5] Is that OK to place a log.txt file in the ~/bin/ folder of an ASP.NET MVC application? Will it affect the app?

A. It is not a good idea to put log files in the bin folder of an application, because every change will cause a pool restart. 
You will face performance problems and unless you already know this, it will be difficult to track down the reason.

3. [ASP.NET MVC 5] What basic folders do we have in an ASP.NET project without Areas? 
What are they for? What subfolders do they have (if applicable)? Which folders are publicly accessible?

A. App_Data: can be used to store some application’s data.
   App_Start: contains configuration classes: RouteConfig, BundleConfig, etc.
   Content: is a publicly accessible folder for static files, such as CSS files, images, etc., but not scripts.
   Controllers: is a default folder for application controllers.
   Scripts: is a publicly accessible folder for JavaScript files.
   Views: The folder contains a folder for every controller, plus a special folder Shared for views used by multiple views/controllers. For example, if we have a controller               called HomeController, we will have a Home subfolder here with all the views related to HomeController.
   
4. [ASP.NET Core MVC] What basic folders do we have in an ASP.NET Core project using the MVC template without Areas? 
What are they for? What subfolders do they have (if applicable)? Which folders are publicly accessible? 

A. wwwroot: The root folder of a site, publicly accessible, contains subfolders for static files (CSS, images, JS, etc.).
   Controllers: A default folder for application controllers
   Views: The folder contains a folder for every controller, plus a special folder Shared for views used by multiple views/controllers. For example, if we have a controller               called HomeController, we will have a Home subfolder here with all the views related to HomeController.
   
5. You have a controller CategoriesController with actions ShowAll, Add, and Delete. 
You’ve got several requirements related to application URLs: What is the easiest way to achieve that?

URL	                Action	        Method
~/v2/Categories	        ShowAll	        GET
~/v2/Categories/Add	Add	        POST
~/v2/Categories/Delete	Delete	        DELETE

A. In ASP.NET MVC 5:

Use a custom route and attributes on action methods to restrict HTTP methods.

Step 1: We need to add a custom route to RoutesCollection (usually in ~/App_Start/RoutesConfig) before the default one:

routes.MapRoute(
                name: "v2",
                url: "v2/{controller}/{action}",
                defaults: new { action = "ShowAll" }
               );
Step 2: To restrict HTTP methods for actions, we need to mark CategoriesController’s methods with the attributes 
[HttpGet], [HttpPost], and [HttpDelete] according to our requirements.

In ASP.NET Core MVC:

There are three ways to fulfill these requirements.

Option #1: Add a custom global route and attributes on action methods to restrict HTTP methods.
Step 1: We need to add a custom global route (usually in Startup.cs) before the default one:

routes.MapRoute(
                name: "v2",
                template: "v2/{controller}/{action=ShowAll}"
               );
Step 2: To restrict HTTP methods for actions, we need to mark CategoriesController’s methods with the attributes 
[HttpGet], [HttpPost], and [HttpDelete] according to our requirements.

This is a good approach for applications without specific requirements for a URL scheme.

Option #2: Configure routes at the action level.
Steps:

Mark actions with attributes to restrict allowed HTTP methods.
Specify route templates via attributes:
        [HttpGet]
        [Route("v2/[controller]")]
        public IActionResult ShowAll()
        {
            return View();
        }

        [HttpPost]
        [Route("v2/[controller]/[action]")]
        public IActionResult Add()
        {
            return View();
        }
This is a good decision if you have specific requirements for a URL scheme, e.g., a REST API.

Option #3: Configure a base route on a controller level and relative routes on an action level.
Steps:

Specify a basic controller route template with an attribute.
Mark actions with attributes to restrict allowed HTTP methods.
Specify relative route templates via attributes:
    [Route("v2/[controller]")]
    public class CategoriesController : Controller
    {
        [HttpGet]
        [Route("")]
        public IActionResult ShowAll()
        {
            return View();
        }

        [HttpPost]
        [Route("[action]")]
        public IActionResult Add()
        {
            return View();
        }
	
This is also a good decision if you have specific requirements for a URL scheme. 
In fact, it can be a better option than the previous one if you always have a constant string or a controller name as a prefix for your routes.

6. By default, you have the master page in your application ~/Views/Shared/_Layout.cshtml and you’ve created a new one ~/Views/Shared/_LayoutV2.cshtml.
How do you apply the new master page to the whole application, except pages with a non-default layout?

A. In both ASP.NET MVC 5 and ASP.NET Core MVC, you have to adjust the file ~/Views/_ViewStart.cshtml.

In ASP.NET MVC 5:

@{
    Layout = "~/Views/Shared/_LayoutV2.cshtml";
}

In ASP.NET Core MVC:

@{
    Layout = "_LayoutV2";
}

7. What is the recommended approach for ASP.NET MVC to globally intercept exceptions?
What other functionality can be implemented with the approach?

A. You can create a custom exception filter to intercept and log unhandled exceptions.

In ASP.NET MVC 5:

To intercept exceptions globally, the filter should be registered in GlobalFilterCollection (usually in ~/App_Start/FilterConfig).

Authentication, authorization, custom action filters, logging, and action result transformation can be done with the same approach.

In ASP.NET Core MVC:

To intercept exceptions globally, the filter should be registered in Startup.ConfigureServices() as shown below:
services.AddMvc(options => { options.Filters.Add(new ApiExceptionFilter()); });

Authorization, custom action filters (sync and async), and action result transformation can be done with the same approach.

8. What are the advantages of using IoC containers in an application?

A. The main advantages are:

The lifetime of every object can be managed externally.
Objects are not responsible for creating services and providing dependencies.
Changes to a dependency list won’t affect an object using the service.
The same instance can be shared by several unrelated consumers.
Services provide contracts, so implementation can be changed in the future.

9. What is the most appropriate lifetime for a database connection/ORM context in an ASP.NET MVC application?

A. The lifetime should be the same as the request, because usually requests don’t live very long. 
Where it’s possible to wrap the whole request in one transaction, this can help comply with ACID principles.

10. [ASP.NET MVC 5] You have an ASP.NET MVC application where you need to use ASP.NET session state and support running across several servers. 
What additional configuration can you perform without writing custom code?

A. In the Web.config file (in the root folder of your application) set sessionState to StateServer for shared in-memory storage or SQLServer for shared durable storage.

11. [ASP.NET Core MVC] You have an ASP.NET Core MVC application where you need to use some cache solution and support running across several servers.
What are your steps?

A. There are several answers, because ASP.NET Core is a new platform and supports several approaches. 
The candidate has to stress that, in the project, we need to use some kind of distributed cache—for example, Redis. 
Also, Microsoft provides several packages to help with this. 
In the case of Redis, Microsoft.Extensions.Caching.Redis provides the middleware and implements IDistributedCache to provide a standardized way to work with it.

12. What is the difference between asynchronous and synchronous actions? When would you use asynchronous actions?

A. Asynchronous actions won’t block the executing thread if it waits for an I/O operation. 
Using asynchronous actions can increase the throughput of a system if you use such a pattern for I/O operations, but it won’t help with CPU-bound operations.

13. [ASP.NET MVC 5] You have a page with Razor C# syntax. What is the difference between these two methods, RenderAction and RenderPartial? What will they do?

@{
    Html.RenderAction("Add");
    Html.RenderPartial("Add");
}

A. RenderAction will call an action method of the current controller and render a result inline. 
In contrast, RenderPartial will render the specified view inline without calling any action method.

14. Explain the MVC Application life cycle.

A. The web applications usually have 2 primary execution steps. These are:
Understanding the request
Sending an appropriate response based on the type of request

The same thing can be related to MVC applications also whose life cycle has 2 foremost phases:
for creating a request object
for sending the response to any browser

15.  What are the various steps to create the request object?

A. In order to create a request object, we have to go through 4 different steps.
Step 1: Fill the route
Step 2: Fetch the route
Step 3: Create a request context
Step 4: Create a controller instance

16. Explain in brief the role of different MVC components?

A. The different MVC components have the following roles -
Presentation: This component takes care of the visual representation of a particular abstraction in the application.
Control: This component takes care of the consistency and uniformity between the abstraction within the system along with their presentation to the user. 
It is also responsible for communicating with all other controls within the MVC system.
Abstraction: This component deals with the functionality of the business domain within the application.

17. What do you mean by partial view of MVC?

A. A partial view can be defined as a portion of HTML that is carefully injected into an existing DOM. 
Partial views are commonly implemented for componentizing Razor views, making them simpler to build and update. 
Controller methods can also directly return the partial views.

18. Explain in brief the difference between adding routes in a webform application & an MVC application?

A. We make use of the MapPageRoute() which is of the RouteCollection class for adding routes in a webform application. 
Whereas, the MapRoute() method is used for adding routes to an MVC application.

19. What is the use of ActionFilters in MVC?

A. ActionFilters are used for executing the logic while MVC action is executed. 
Furthermore, action filters permit the implementation of pre and post-processing logic and action methods.

-- Filters in MVC
Filters can be applied to an action method or controller in a declarative or programmatic way. 
Declarative means by applying a filter attribute to an action method or controller class and 
programmatic means by implementing a corresponding interface.

Filter Type, Description, Built-in filter, Interface
1. Authorization filters		
Performs authentication and authorizes before executing an action method.	
[Authorize], [RequireHttps]	
IAuthorizationFilter

2. Action filters	
Performs some operation before and after an action method executes.
IActionFilter

3. Result filters	
Performs some operation before or after the execution of the view.	
[OutputCache]	
IResultFilter

4. Exception filters	
Performs some operation if there is an unhandled exception thrown during the execution of the ASP.NET MVC pipeline.	
[HandleError]	
IExceptionFilter

=> Let's take an example of a built-in Exception filter. Exception filter executes when an unhandled exception occurs in your application.
The HandleErrorAttribute class is a built-in exception filter class that renders the Error.cshtml (~/Views/Shared/Error.cshtml) by default when an unhandled exception occurs.

The following example demonstrates the use of [HandleError] attribute on the controller class.
[HandleError]
public class HomeController : Controller
{
    public ActionResult Index()
    {
        //throw exception for demo
        throw new Exception("This is unhandled exception");
            
        return View();
    }

    public ActionResult About()
    {
        return View();
    }

    public ActionResult Contact()
    {
        return View();
    }        
}

Above, the [HandleError] attribute applied to the HomeController. 
So, an error page Error.cshtml will be displayed if any action method of the HomeController throws an unhandled exception. 
Please note that unhandled exceptions are exceptions that are not handled by the try-catch blocks.
Filters applied to the controller will automatically be applied to all the action methods of a controller.

NOTE: Please make sure that the CustomError mode is on in System.web section of web.config.
<customErrors mode="On" /> 

20. What are the different properties of MVC routes?

A. MVC routes are accountable for governing which controller method will be executed for a given URL. Thus, the URL comprises of the following properties:
Route Name: It is the URL pattern which is used for mapping the handler.
URL Pattern: It is another property containing the literal values as well as variable placeholders (known as URL parameters).
Defaults: This is the default parameter value assigned at the time of parameter creation.
Constraints: These are used for applying against the URL pattern for more narrowly defining the URL matching it.

21. Mention & explain the different approaches you will use to implement Ajax in MVC?

A. There are 2 different approaches to implement Ajax in MVC. These are:
jQuery: This is a library written using JavaScript for simplifying HTML-DOM manipulation.
AJAX libraries: Asynchronous JavaScript and XML libraries are set of web development libraries written using JavaScript and are used to perform common operations.

22. Define Output Caching in MVC?

A. Output Caching is an approach used for improving the performance of an MVC application. 
It is used for enabling its users to cache the data sent back by the controller method 
so that the data used earlier does not get generated each time while invoking the same controller method. 
It has advantages to use Output Caching as it cuts down database server round trips, minimizes server round trips as well as reduces the network traffic.

23. View vs PartialView

A. VIEW											PARTIAL VIEW
The view is not as lightweight as that of Partial view					Partial view, as the name suggests, is lightweight than View
The view has its own layout page							The partial view does not have its own layout page
The Viewstart page is rendered just before rendering any view				Partial view is designed particularly for rendering within the view
The view can have markup tags of HTML such as HTML, head, body, title, meta, etc.	The partial view does not contain any markup

24. Define Scaffolding in MVC?

A. Scaffolding can be defined as an ASP.NET’s code-generation framework used in web applications. 
Scaffolding is used in developing MVC applications when anyone wants to rapidly enhance the code that intermingles with the application’s data model. 
Scaffolding can also lower down the quantity of time for developing a standard data operation in the application.

25. The order in which filters are used –
First, the authorization filters are executed
Followed by the Action filters
Then, the response filters are executed
Finally, the exception filters

26. Explain briefly the 2 approaches of adding constraints to an MVC route?

A. For adding constraints to an MVC route, the 2 different approaches are:
By making use of regular expressions
By making use of objects that implement the “IRouteConstraint” interface.

27. Explain briefly the use of ViewModel in MVC?

A. ViewModel can be defined as a plain class having different properties. 
It is used for binding a view that is strongly-typed. 
ViewModel consists of various validation rules for defining the properties of practicing data annotation.

28. What are HTML helpers in MVC?

A. With MVC, HTML helpers are much like traditional ASP.NET Web Form controls.
 
Just like web form controls in ASP.NET, HTML helpers are used to modify HTML. 
But HTML helpers are more lightweight. Unlike Web Form controls, an HTML helper does not have an event model and a view state.
In most cases, an HTML helper is just a method that returns a string. 
With MVC, you can create your own helpers, or use the built in HTML helpers.

Standard HTML Helpers
 
HTML Links
 
The easiest way to render an HTML link in is to use the HTML.ActionLink() helper.
With MVC, the Html.ActionLink() does not link to a view. It creates a link to a controller action.
ASP Syntax
<%=Html.ActionLink("About this Website", "About")%>  
The first parameter is the link text, and the second parameter is the name of the controller action.
 
The Html.ActionLink() helper above, outputs the following HTML:
<a href="/Home/About">About this Website</a> 

HTML Form Elements
There following HTML helpers can be used to render (modify and output) HTML form elements: 
BeginForm()
EndForm()
TextArea()
TextBox()
CheckBox()
RadioButton()
ListBox()
DropDownList()
Hidden()
Password()

29. 
