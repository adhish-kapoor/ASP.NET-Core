# Understanding the Run, Use and Map Method
============================================

=> app.Run()
This middleware component may expose Run[Middleware] methods that are executed at the end of the pipeline. 
Generally, this acts as a terminal middleware and is added at the end of the request pipeline, as it cannot call the next middleware.

=> app.Use()
This is used to configure multiple middleware. 
Unlike app.Run(), We can include the next parameter into it, which calls the next request delegate in the pipeline. 
We can also short-circuit (terminate) the pipeline by not calling the next parameter.

            	 //Middlewares added to request pipeline
           	 //async used because ASP.NET CORE works on asynchronous pattern
           	 //next() is used to call next middleware in the pipeline
            			app.Use(async (context, next) =>
           			{
                			await context.Response.WriteAsync("Hello from first middleware");

                			await next();

               	 			await context.Response.WriteAsync("Hello from first middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from second middleware");

                			await next();

                			await context.Response.WriteAsync("Hello from second middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from third middleware");
            			});


=> app.Map()
These extensions are used as a convention for branching the pipeline. 
The map branches the request pipeline based on matches of the given request path. If the request path starts with the given path, the branch is executed.

			public void Configure(IApplicationBuilder app, IWebHostEnvironment env)  
			{  
    				app.Map("/m1", HandleMapOne);  
    				app.Map("/m2", appMap => {  
        					appMap.Run(async context =>  
       			 		{  
           				 		await context.Response.WriteAsync("Hello from 2nd app.Map()");  
        					});  
    			       	});  
    				app.Run(async (context) =>  
    				{  
        					await context.Response.WriteAsync("Hello from app.Run()");  
    				});  
			}  
			private static void HandleMapOne(IApplicationBuilder app)  
			{  
    				app.Run(async context =>  
    				{  
        					await context.Response.WriteAsync("Hello from 1st app.Map()");  
    				});   
			}  

The following table shows the requests and responses from localhost using the above code.
Request				Response
https://localhost:44362/		Hello from app.Run()
https://localhost:44362/m1		Hello from 1st app.Map()
https://localhost:44362/m1/xyz		Hello from 1st app.Map()
https://localhost:44362/m2		Hello from 2nd app.Map()
https://localhost:44362/m500		Hello from app.Run()


In summary, every middleware component in ASP.NET Core:
		1. Has access to both the incoming requests and the outgoing response.
		2. May simply pass the request to the next piece of middleware in the pipeline.
		3. May perform some processing logic and then pass that request to the next middleware for further processing.
		4. May terminate(short-circuit) the request pipeline whenever required.
		5. Is executed in the order they are added to the pipeline.


# launchSettings.json
===========================

=>launchSettings.json is not required on production server, only required on development machine.
- A .NET Core application can have a file called launchSettings.json, which describes how a project can be launched. 
It describes the command to run, whether the browser should be opened, which environment variables should be set, and so on.

	// profiles section has 2 servers : IIS express and Kestrel
	                // HTTP access logs aren’t collected in Kestrel. For some, this doesn’t matter. But for others that use these logs as a debugging tool (Or pump them to something like Azure Diagnostics etc), this could be an issue.
		// Multiple apps on the same port is not supported in Kestrel simply by design. So when hosting on IIS, IIS itself listens on port 80 and “binds” websites to specific URLs. Kestrel on the other hand binds to an IP (Still with a website URL if you like), but you can’t then start another .NET Core Kestrel instance on the same port.  It’s a one to one mapping.
		// Windows Authentication does not exist on Kestrel as it’s cross platform (more on that later).
		// IIS has a direct FTP integration setup if you deploy via this method (Kestrel does not)
		// Request Filtering (e.g. Blocking access to certain file extensions, folders, verbs etc) is much more fully featured in IIS (Although some of this can be “coded” in Kestrel in some cases).
		// Mime Type Mapping (e.g. A particular file extension being mapped to a particular mime type on response) is much better in IIS.
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:51062",
      "sslPort": 0
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "BookStore": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


# Environment variables
========================

=> Used in launchSettings.json file under the "profiles" section.

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
            if (env.IsDevelopment())					// if the environment is Development; IsStaging(), IsProduction() and IsEnvironment()		
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
   }


# Setup MVC in .Net Core application using AddControllersWithViews method
===============================================================

=>    // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

=> 	app.UseEndpoints(endpoints =>
               {
                endpoints.MapDefaultControllerRoute();			// will map to Home/Index
                });


# AddMVC() vs AddControllersWithViews() vs AddControllers() vs AddRazorPages()
================================================================

=> 	Web API - AddControllers()
	Model View Controller - AddControllersWithViews()
	Razor pages - AddRazorPages()
	Else - AddMVC()

AddMVC()				AddControllersWithViews()				AddControllers()				AddRazorPages()
==========================================================================================================================================
Controllers				Controllers					Controllers				Controllers

Model Binding				Model Binding					Model Binding				Model Binding

API Explorer				API Explorer					API Explorer				------------------

Authorization				Authorization					Authorization				Authorization

CORS					CORS						CORS					-------------------

Validations				Validations					Validations				Validations

FormatterMapping				FormatterMapping					FormatterMapping				-------------------

Antiforgery				Antiforgery					-----------------------				Antiforgery

Temp Data				Temp Data					-----------------------				Temp Data

Views					Views						-----------------------				Views

Pages					-----------------					----------------------				Pages

Tag Helpers				Tag Helpers					----------------------				Tag Helpers

Memory Cache				Memory Cache					---------------------				Memory Cache


# 
									