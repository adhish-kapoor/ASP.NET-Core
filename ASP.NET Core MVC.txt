# Understanding the Run, Use and Map Method
============================================

=> app.Run()
This middleware component may expose Run[Middleware] methods that are executed at the end of the pipeline. 
Generally, this acts as a terminal middleware and is added at the end of the request pipeline, as it cannot call the next middleware.

=> app.Use()
This is used to configure multiple middleware. 
Unlike app.Run(), We can include the next parameter into it, which calls the next request delegate in the pipeline. 
We can also short-circuit (terminate) the pipeline by not calling the next parameter.

            	 //Middlewares added to request pipeline
           	 //async used because ASP.NET CORE works on asynchronous pattern
           	 //next() is used to call next middleware in the pipeline
            			app.Use(async (context, next) =>
           			{
                			await context.Response.WriteAsync("Hello from first middleware");

                			await next();

               	 			await context.Response.WriteAsync("Hello from first middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from second middleware");

                			await next();

                			await context.Response.WriteAsync("Hello from second middleware response");
            			});

            			app.Use(async (context, next) =>
            			{
                			await context.Response.WriteAsync("Hello from third middleware");
            			});


=> app.Map()
These extensions are used as a convention for branching the pipeline. 
The map branches the request pipeline based on matches of the given request path. If the request path starts with the given path, the branch is executed.

			public void Configure(IApplicationBuilder app, IWebHostEnvironment env)  
			{  
    				app.Map("/m1", HandleMapOne);  
    				app.Map("/m2", appMap => {  
        					appMap.Run(async context =>  
       			 		{  
           				 		await context.Response.WriteAsync("Hello from 2nd app.Map()");  
        					});  
    			       	});  
    				app.Run(async (context) =>  
    				{  
        					await context.Response.WriteAsync("Hello from app.Run()");  
    				});  
			}  
			private static void HandleMapOne(IApplicationBuilder app)  
			{  
    				app.Run(async context =>  
    				{  
        					await context.Response.WriteAsync("Hello from 1st app.Map()");  
    				});   
			}  

The following table shows the requests and responses from localhost using the above code.
Request					Response
https://localhost:44362/		Hello from app.Run()
https://localhost:44362/m1		Hello from 1st app.Map()
https://localhost:44362/m1/xyz		Hello from 1st app.Map()
https://localhost:44362/m2		Hello from 2nd app.Map()
https://localhost:44362/m500		Hello from app.Run()


In summary, every middleware component in ASP.NET Core:
		1. Has access to both the incoming requests and the outgoing response.
		2. May simply pass the request to the next piece of middleware in the pipeline.
		3. May perform some processing logic and then pass that request to the next middleware for further processing.
		4. May terminate(short-circuit) the request pipeline whenever required.
		5. Is executed in the order they are added to the pipeline.


# launchSettings.json
===========================

=>launchSettings.json is not required on production server, only required on development machine.
- A .NET Core application can have a file called launchSettings.json, which describes how a project can be launched. 
It describes the command to run, whether the browser should be opened, which environment variables should be set, and so on.

	// profiles section has 2 servers : IIS express and Kestrel
	                // HTTP access logs aren’t collected in Kestrel. For some, this doesn’t matter. But for others that use these logs as a debugging tool (Or pump them to something like Azure Diagnostics etc), this could be an issue.
		// Multiple apps on the same port is not supported in Kestrel simply by design. So when hosting on IIS, IIS itself listens on port 80 and “binds” websites to specific URLs. 
		// Kestrel on the other hand binds to an IP (Still with a website URL if you like), but you can’t then start another .NET Core Kestrel instance on the same port.  It’s a one to one mapping.
		// Windows Authentication does not exist on Kestrel as it’s cross platform (more on that later).
		// IIS has a direct FTP integration setup if you deploy via this method (Kestrel does not)
		// Request Filtering (e.g. Blocking access to certain file extensions, folders, verbs etc) is much more fully featured in IIS (Although some of this can be “coded” in Kestrel in some cases).
		// Mime Type Mapping (e.g. A particular file extension being mapped to a particular mime type on response) is much better in IIS.
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:51062",
      "sslPort": 0
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "BookStore": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


# Environment variables
========================

=> Used in launchSettings.json file under the "profiles" section.

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
            if (env.IsDevelopment())					// if the environment is Development; IsStaging(), IsProduction() and IsEnvironment()		
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
   }


# Setup MVC in .Net Core application using AddControllersWithViews method
===============================================================

=>    // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

=> 	app.UseEndpoints(endpoints =>
               {
                endpoints.MapDefaultControllerRoute();			// will map to Home/Index
                });


# AddMVC() vs AddControllersWithViews() vs AddControllers() vs AddRazorPages()
================================================================

=> 	Web API - AddControllers()
	Model View Controller - AddControllersWithViews()
	Razor pages - AddRazorPages()
	Else - AddMVC()

AddMVC()				AddControllersWithViews()				AddControllers()				AddRazorPages()
==========================================================================================================================================
Controllers				Controllers					Controllers				Controllers

Model Binding				Model Binding					Model Binding				Model Binding

API Explorer				API Explorer					API Explorer				------------------

Authorization				Authorization					Authorization				Authorization

CORS					CORS						CORS					-------------------

Validations				Validations					Validations				Validations

FormatterMapping			FormatterMapping					FormatterMapping				-------------------

Antiforgery				Antiforgery					-----------------------				Antiforgery

Temp Data				Temp Data					-----------------------				Temp Data

Views					Views						-----------------------				Views

Pages					-----------------					----------------------				Pages

Tag Helpers				Tag Helpers					----------------------				Tag Helpers

Memory Cache				Memory Cache					---------------------				Memory Cache


# Controllers
===============

=>	public class BookController : Controller
    	{
        		public string GetAllBooks()
        		{
            			return "All books";				// http://localhost:51062/book/getallbooks
        		}

        		public string GetBook(int id)
        		{
            			return $"book with id = {id}";			// http://localhost:51062/book/getbook/4
        		}						// book with id = 4
  
	
		public string SearchBooks(string bookName, string authorName)
        		{
            			return $"Book with name = {bookName} and author = {authorName}";		// http://localhost:51062/book/Searchbooks?bookName=MVC&authorName=Adhish
        		}									// Book with name = MVC and author = Adhish
	}	


# View Discovery
=================

=> 	When we return view from action method then View Discovery takes place.
	View Discovery determines which view file will be used for this action method.


	0. An unhandled exception occurred while processing the request.              					// http://localhost:51062/home/contactus
		InvalidOperationException: The view 'ContactUs' was not found. The following locations were searched:
		/Views/Home/ContactUs.cshtml
		/Views/Shared/ContactUs.cshtml

	0. Common views must be placed in Shared folder.

	0. return View();					// name of view is equal to name of action method
	0. return View("viewName"); 				// name of view is not equal to name of action method

	==> Return View from other location
	 	0. Full path of view (extension of view file is required)			// return View("TempView/AdhishTemp.cshtml");
		0. Relative path (extension of view file is not required)			// return View("../../TempView/AdhishTemp");

	0. Razor ViewEngine is responsible for view discovery.


# Razor ViewEngine
==================

=> 	0. View Engine converts all C# code to HTML from a .cshtml file.
	0. View Engine is used to get/set the default path location for view, shared folder etc.

	0. Razor ViewEngine is used to write C# logic on view page
	0. Razor syntax is a standard for Razor ViewEngine (@ symbol is used).

	0. @DateTime.Now.ToString("yyyy-MM-dd")					// will output current date
	0.Escape Sequence is used to print @ on our view 				// @twitterAccount (<h1>Twitter Account - @@Adhish_Kapoor</h1>)


# Conditional statements in Razor ViewEngine
====================================

=> 	0. Ternary operator
		@{
			int a=10;
			int b=0;
		}

	<h1>Ternary - @(a==10 ? b=10 : b=5)</h1>					// Ternary - 10
	<h2>Value of b = @b</h2>							// Value of b = 10

# for and forEach loop
=========================

=> 		@for(int i=0;i<10;i++)
		{
			<h1>Hello @i</h1>
		}
	--------------------------------------------------------------------------------
		@{
			var list = new List<int>() {1, 2, 3, 4, 5};
		}
		@foreach(var i in list)
		{
			<h1>@i</h1>	
		}


# Static files
=================

=> 		0. Images, CSS files, JS files etc.
		0. All static files are placed inside wwwroot folder (also known as Content Root folder)
		0. app.UseStaticFiles(); is used for the static files in Startup.cs
		
		0. 	app.UseStaticFiles(new StaticFileOptions()								
			{
				FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), "MyStaticFiles")),		// to get Static files from custom folder other than wwwroot folder
				RequestPath = "/MyStaticFiles"
			});


# Install and use client side library(jQuery and Bootstrap)
===============================================

=> 		0. right click on project -> Add -> client side library
		0. defaultProvider : cdnjs in dropdown and added library jQuery
		0. library manager is used to change the version of client side libraries easily.


# Razor file compilation
======================

=> 		0. By default, Razor file is compiled at 2 times:
			1. Build
			2. Publish

		0. To resolve the problem of building solution again and again to see the changes in view file, we can Enable run time compilation of razor file.
		0. Steps to enable run time compilation of razor file:
			1. Install a new package : Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
			2. Make changes in Startup.cs (configureServices) : services.AddRazorPages().AddRazorRuntimeCompilation();
		0. Runtime Compilation Conditionally : Add preprocessor directive for run time compilation to happen in Debug mode.
			#if DEBUG
				services.AddRazorPages().AddRazorRuntimeCompilation();
			#endif			


# Layout in ASP.NET Core
=========================

=> 		0. Layout is a .cshtml file used to provide common structure to other views.
		0. @RenderBody() method is used to provide space for other view.
		0. Only one RenderBody() method inside one layout file.
		
		0. Benefits of Layout : 
			1. Less code
			2. Centralized code for static files
			3. No duplicate code
			4. Easy to update
			5. Good architecture


# 
