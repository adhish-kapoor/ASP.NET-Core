===Razor pages
->ASP.NET Core Razor Pages is a page-focused framework for building dynamic, data-driven web sites with clean separation of concerns.
->The Razor Pages framework is lightweight and very flexible. It provides the developer with full control over rendered HTML.
->Razor Pages is the recommended framework for cross-platform server-side HTML generation on .NET Core. 

===Anatomy of a Razor Pages application
->The Pages folder is the default location for Razor Pages files. The files ending with .cshtml are Razor files. 
->Other files, ending with .cs are C# class files. These are paired with Razor files and are known as PageModel files. 
->Not all Razor files have a matching class file. Some Razor files have a leading underscore (_) in their file name.
->The wwwroot folder is where static files are placed in a .NET Core web application.
->These files include the CSS style sheets, images and JavaScript files used by the site. 

===Files and Folders
->The .vscode folder,It contains files that provide configuration for debugging.

->The bin folder contains the output of a Build operation - the compiled binaries for the application. 
There is nothing much there at the moment - just a folder named Debug containing another folder named netcoreapp2.2. 

->The obj folder contains a variety of files. You will hardly ever need to access this folder, except to perhaps delete its contents entirely. 
It is used by the framework as a place to store temporary files and other objects used in the build process.

->The Properties folder contains a file called lanchSettings.json. This is a configuration file for launching the application in a browser.

->The root of the application consists of 5 files. 
here are two JSON files named appsettings.
These contain application configuration information. 
They are the equivalent to the appSettings section in the web.Config file of previous versions of ASP.NET. 
The version with Development in its name will only be used when the application is running in development mode.

->The .csproj file is the standard MS Build XML-based project file. 
It contains project settings and references to files used by the project.
MS Build uses this file to configure the actual build process of the application.

->All ASP.NET Core applications are actually console applications. 
The default entry point into any console application is the Main method in the Program class found in the Program.cs file.
The Main method in this case is responsible for configuring a web host for the application and launching it so that it is ready to serve requests.

->The Startup.cs file contains a class called Startup. 
This class has two principal methods - ConfigureServices and Configure. 
These are used to configure the application's request processing pipeline (optional components that the application needs) and the services that it relies on.

->The wwwroot folder houses static files - images, JavaScript files, CSS files etc.

===Adding Your First Page
->About.cshtml (Razor with Page Model)
->@page
@model Bakery.Pages.AboutModel
@{
    ViewData["Title"] = "About Us";
}
<section id="main">
    <h1>A little bit about Fourth Coffee</h1>
    <p>
        Fourth Coffee was founded in 2010 and delivers coffee and fresh baked goods right to your door. 
        In another life, Bill Baker was a developer by day and pastry chef by night.  
        But soon Bill's innate skills with all things involving butter, flour and sugar put him 
        even more in demand than his programming talents and what started out as a way to satisfy 
        his own sweet tooth became all-consuming.  Fourth Coffee is not only a candy-coated wonderland 
        of coffee, pastries, cookies and cakes, it also honors his tech background by employing a state 
        of the art online ordering system that makes it easy for anybody with internet access to 
        order his all natural, locally-sourced confections and have them delivered to their 
        door within 24 hours.
    </p>
</section>

->The only differences are the @page directive at the top of the file, indicating that this is a Razor Page, the @model declaration, and the use of the ViewData property to hold the title of the page. 
In Web Pages, this was handled by the PageData property, which had a version based on the dynamic type. 
The team behind Razor Pages have largely moved away from using the dynamic type.

===Adding Navigation
->_Layout.cshtml file located in the Pages/Shared folder
-> <li class="nav-item">
    <a class="nav-link text-dark" asp-page="/Index">Home</a>
</li>
<li class="nav-item">
    <a class="nav-link text-dark" asp-page="/About">About</a>
</li>

->The links are generated by tag helpers. 
These are components that are designed to target specific tags in the HTML. 
The anchor tag helper targets the HTML a element. 
Instead of providing an href attribute to point to an internal page, 
you provide an asp-page attribute that takes the path of the page, relative to the root Pages folder.

->